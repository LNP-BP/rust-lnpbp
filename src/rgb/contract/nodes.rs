// LNP/BP Rust Library
// Written in 2020 by
//     Dr. Maxim Orlovsky <orlovsky@pandoracore.com>
//
// To the extent possible under law, the author(s) have dedicated all
// copyright and related and neighboring rights to this software to
// the public domain worldwide. This software is distributed without
// any warranty.
//
// You should have received a copy of the MIT License
// along with this software.
// If not, see <https://opensource.org/licenses/MIT>.

use std::collections::BTreeSet;

use bitcoin::hashes::{sha256, sha256t, Hash, HashEngine};

use super::{
    Assignments, AutoConceal, OwnedRights, ParentOwnedRights,
    ParentPublicRights,
};
use crate::bp;
use crate::client_side_validation::{
    commit_strategy, CommitEncodeWithStrategy, ConsensusCommit,
};
use crate::paradigms::client_side_validation::CommitEncode;
use crate::rgb::schema::{
    ExtensionType, FieldType, NodeType, OwnedRightType, PublicRightType,
    TransitionType,
};
use crate::rgb::{schema, seal, Metadata, SchemaId, SimplicityScript};

/// Holds definition of valencies for contract nodes, which is a set of
/// allowed valencies types
pub type PublicRights = BTreeSet<PublicRightType>;

lazy_static! {
    static ref MIDSTATE_NODE_ID: [u8; 32] = {
        let hash = sha256::Hash::hash(b"rgb:node");
        let mut engine = sha256::Hash::engine();
        engine.input(&hash[..]);
        engine.input(&hash[..]);
        engine.midstate().0
    };
}

tagged_hash!(
    NodeId,
    NodeIdTag,
    MIDSTATE_NODE_ID,
    doc = "Unique node (genesis, extensions & state transition) identifier \
           equivalent to the commitment hash"
);

impl CommitEncodeWithStrategy for NodeId {
    type Strategy = commit_strategy::UsingStrict;
}

// TODO: (new) display in a reverse format
tagged_hash!(
    ContractId,
    ContractIdTag,
    MIDSTATE_NODE_ID,
    doc = "Unique contract identifier equivalent to the contract genesis \
           commitment hash"
);

impl CommitEncodeWithStrategy for ContractId {
    type Strategy = commit_strategy::UsingStrict;
}

/// Trait which is implemented by all node types (see [`NodeType`])
pub trait Node {
    /// Returns type of the node (see [`NodeType`]). Unfortunately, this can't
    /// be just a const, since it will break our ability to convert concrete
    /// `Node` types into `&dyn Node` (entities implementing traits with const
    /// definitions can't be made into objects)
    fn node_type(&self) -> NodeType;

    /// Returns [`NodeId`], which is a hash of this node commitment
    /// serialization
    fn node_id(&self) -> NodeId;

    /// Returns [`Option::Some`]`(`[`ContractId`]`)`, which is a hash of
    /// genesis.
    /// - For genesis node, this hash is byte-equal to [`NodeId`] (however
    ///   displayed in a reverse manner, to introduce semantical distinction)
    /// - For extension node function returns id of the genesis, to which this
    ///   node commits to
    /// - For state transition function returns [`Option::None`], since they do
    ///   not keep this information; it must be deduced through state transition
    ///   graph
    fn contract_id(&self) -> Option<ContractId>;

    /// Returns [`Option::Some`]`(`[`TransitionType`]`)` for transitions or
    /// [`Option::None`] for genesis and extension node types
    fn transition_type(&self) -> Option<TransitionType>;

    /// Returns [`Option::Some`]`(`[`ExtensionType`]`)` for extension nodes or
    /// [`Option::None`] for genesis and trate transitions
    fn extension_type(&self) -> Option<ExtensionType>;

    fn metadata(&self) -> &Metadata;
    fn parent_owned_rights(&self) -> &ParentOwnedRights;
    fn parent_public_rights(&self) -> &ParentPublicRights;
    fn owned_rights(&self) -> &OwnedRights;
    fn owned_rights_mut(&mut self) -> &mut OwnedRights;
    fn public_rights(&self) -> &PublicRights;
    fn public_rights_mut(&mut self) -> &mut PublicRights;
    fn script(&self) -> &SimplicityScript;

    #[inline]
    fn field_types(&self) -> Vec<FieldType> {
        self.metadata().keys().cloned().collect()
    }

    #[inline]
    fn owned_right_types(&self) -> BTreeSet<OwnedRightType> {
        self.owned_rights().keys().cloned().collect()
    }

    #[inline]
    fn owned_rights_by_type(&self, t: OwnedRightType) -> Option<&Assignments> {
        self.owned_rights().into_iter().find_map(|(t2, a)| {
            if *t2 == t {
                Some(a)
            } else {
                None
            }
        })
    }

    #[inline]
    fn all_seal_definitions(&self) -> Vec<seal::Confidential> {
        self.owned_rights()
            .into_iter()
            .flat_map(|(_, assignment)| assignment.all_seals())
            .collect()
    }

    #[inline]
    fn known_seal_definitions(&self) -> Vec<&seal::Revealed> {
        self.owned_rights()
            .into_iter()
            .flat_map(|(_, assignment)| assignment.known_seals())
            .collect()
    }

    #[inline]
    fn known_seal_definitions_by_type(
        &self,
        assignment_type: OwnedRightType,
    ) -> Vec<&seal::Revealed> {
        self.owned_rights_by_type(assignment_type)
            .map(Assignments::known_seals)
            .unwrap_or(vec![])
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct Genesis {
    schema_id: SchemaId,
    chain: bp::Chain,
    metadata: Metadata,
    owned_rights: OwnedRights,
    public_rights: PublicRights,
    script: SimplicityScript,
}

#[derive(Clone, Debug, PartialEq, StrictEncode, StrictDecode)]
#[strict_crate(crate)]
pub struct Extension {
    extension_type: ExtensionType,
    contract_id: ContractId,
    metadata: Metadata,
    parent_public_rights: ParentPublicRights,
    owned_rights: OwnedRights,
    public_rights: PublicRights,
    script: SimplicityScript,
}

#[derive(Clone, Debug, Default, PartialEq, StrictEncode, StrictDecode)]
#[strict_crate(crate)]
pub struct Transition {
    transition_type: TransitionType,
    metadata: Metadata,
    parent_owned_rights: ParentOwnedRights,
    owned_rights: OwnedRights,
    public_rights: PublicRights,
    script: SimplicityScript,
}

impl ConsensusCommit for Genesis {
    type Commitment = NodeId;
}

impl ConsensusCommit for Extension {
    type Commitment = NodeId;
}

impl ConsensusCommit for Transition {
    type Commitment = NodeId;
}

impl CommitEncodeWithStrategy for Extension {
    type Strategy = commit_strategy::UsingStrict;
}

impl CommitEncodeWithStrategy for Transition {
    type Strategy = commit_strategy::UsingStrict;
}

impl AutoConceal for Genesis {
    fn conceal_except(&mut self, seals: &Vec<seal::Confidential>) -> usize {
        let mut count = 0;
        for (_, assignment) in self.owned_rights_mut() {
            count += assignment.conceal_except(seals);
        }
        count
    }
}

impl AutoConceal for Extension {
    fn conceal_except(&mut self, seals: &Vec<seal::Confidential>) -> usize {
        let mut count = 0;
        for (_, assignment) in self.owned_rights_mut() {
            count += assignment.conceal_except(seals);
        }
        count
    }
}

impl AutoConceal for Transition {
    fn conceal_except(&mut self, seals: &Vec<seal::Confidential>) -> usize {
        let mut count = 0;
        for (_, assignment) in self.owned_rights_mut() {
            count += assignment.conceal_except(seals);
        }
        count
    }
}

impl Node for Genesis {
    #[inline]
    fn node_type(&self) -> NodeType {
        NodeType::Genesis
    }

    #[inline]
    fn node_id(&self) -> NodeId {
        self.clone().consensus_commit()
    }

    #[inline]
    fn contract_id(&self) -> Option<ContractId> {
        Some(ContractId::from_inner(self.node_id().into_inner()))
    }

    #[inline]
    fn transition_type(&self) -> Option<schema::TransitionType> {
        None
    }

    #[inline]
    fn extension_type(&self) -> Option<usize> {
        None
    }

    #[inline]
    fn parent_owned_rights(&self) -> &ParentOwnedRights {
        lazy_static! {
            static ref PARENT_EMPTY: ParentOwnedRights =
                ParentOwnedRights::new();
        }
        &PARENT_EMPTY
    }

    #[inline]
    fn parent_public_rights(&self) -> &ParentPublicRights {
        lazy_static! {
            static ref PARENT_EMPTY: ParentPublicRights =
                ParentPublicRights::new();
        }
        &PARENT_EMPTY
    }

    #[inline]
    fn metadata(&self) -> &Metadata {
        &self.metadata
    }

    #[inline]
    fn owned_rights(&self) -> &OwnedRights {
        &self.owned_rights
    }

    #[inline]
    fn owned_rights_mut(&mut self) -> &mut OwnedRights {
        &mut self.owned_rights
    }

    #[inline]
    fn public_rights(&self) -> &PublicRights {
        &self.public_rights
    }

    #[inline]
    fn public_rights_mut(&mut self) -> &mut PublicRights {
        &mut self.public_rights
    }

    #[inline]
    fn script(&self) -> &SimplicityScript {
        &self.script
    }
}

impl Node for Extension {
    #[inline]
    fn node_type(&self) -> NodeType {
        NodeType::Extension
    }

    #[inline]
    fn node_id(&self) -> NodeId {
        self.clone().consensus_commit()
    }

    #[inline]
    fn contract_id(&self) -> Option<ContractId> {
        Some(self.contract_id)
    }

    #[inline]
    fn transition_type(&self) -> Option<schema::TransitionType> {
        None
    }

    #[inline]
    fn extension_type(&self) -> Option<usize> {
        Some(self.extension_type)
    }

    #[inline]
    fn parent_owned_rights(&self) -> &ParentOwnedRights {
        lazy_static! {
            static ref PARENT_EMPTY: ParentOwnedRights =
                ParentOwnedRights::new();
        }
        &PARENT_EMPTY
    }

    #[inline]
    fn parent_public_rights(&self) -> &ParentPublicRights {
        &self.parent_public_rights
    }

    #[inline]
    fn metadata(&self) -> &Metadata {
        &self.metadata
    }

    #[inline]
    fn owned_rights(&self) -> &OwnedRights {
        &self.owned_rights
    }

    #[inline]
    fn owned_rights_mut(&mut self) -> &mut OwnedRights {
        &mut self.owned_rights
    }

    #[inline]
    fn public_rights(&self) -> &PublicRights {
        &self.public_rights
    }

    #[inline]
    fn public_rights_mut(&mut self) -> &mut PublicRights {
        &mut self.public_rights
    }

    #[inline]
    fn script(&self) -> &SimplicityScript {
        &self.script
    }
}

impl Node for Transition {
    #[inline]
    fn node_type(&self) -> NodeType {
        NodeType::StateTransition
    }

    #[inline]
    fn node_id(&self) -> NodeId {
        self.clone().consensus_commit()
    }

    #[inline]
    fn contract_id(&self) -> Option<ContractId> {
        None
    }

    #[inline]
    fn transition_type(&self) -> Option<schema::TransitionType> {
        Some(self.transition_type)
    }

    #[inline]
    fn extension_type(&self) -> Option<usize> {
        None
    }

    #[inline]
    fn parent_owned_rights(&self) -> &ParentOwnedRights {
        &self.parent_owned_rights
    }

    #[inline]
    fn parent_public_rights(&self) -> &ParentPublicRights {
        lazy_static! {
            static ref PARENT_EMPTY: ParentPublicRights =
                ParentPublicRights::new();
        }
        &PARENT_EMPTY
    }

    #[inline]
    fn metadata(&self) -> &Metadata {
        &self.metadata
    }

    #[inline]
    fn owned_rights(&self) -> &OwnedRights {
        &self.owned_rights
    }

    #[inline]
    fn owned_rights_mut(&mut self) -> &mut OwnedRights {
        &mut self.owned_rights
    }

    #[inline]
    fn public_rights(&self) -> &PublicRights {
        &self.public_rights
    }

    #[inline]
    fn public_rights_mut(&mut self) -> &mut PublicRights {
        &mut self.public_rights
    }

    #[inline]
    fn script(&self) -> &SimplicityScript {
        &self.script
    }
}

impl Genesis {
    pub fn with(
        schema_id: SchemaId,
        chain: bp::Chain,
        metadata: Metadata,
        owned_rights: OwnedRights,
        public_rights: PublicRights,
        script: SimplicityScript,
    ) -> Self {
        Self {
            schema_id,
            chain,
            metadata,
            owned_rights,
            public_rights,
            script,
        }
    }

    #[inline]
    pub fn contract_id(&self) -> ContractId {
        ContractId::from_inner(self.node_id().into_inner())
    }

    #[inline]
    pub fn schema_id(&self) -> SchemaId {
        self.schema_id
    }

    #[inline]
    pub fn chain(&self) -> &bp::Chain {
        &self.chain
    }
}

impl Extension {
    pub fn with(
        extension_type: ExtensionType,
        contract_id: ContractId,
        metadata: Metadata,
        parent_public_rights: ParentPublicRights,
        owned_rights: OwnedRights,
        public_rights: PublicRights,
        script: SimplicityScript,
    ) -> Self {
        Self {
            extension_type,
            contract_id,
            metadata,
            parent_public_rights,
            owned_rights,
            public_rights,
            script,
        }
    }
}

impl Transition {
    pub fn with(
        transition_type: schema::TransitionType,
        metadata: Metadata,
        parent_owned_rights: ParentOwnedRights,
        owned_rights: OwnedRights,
        public_rights: PublicRights,
        script: SimplicityScript,
    ) -> Self {
        Self {
            transition_type,
            metadata,
            parent_owned_rights,
            owned_rights,
            public_rights,
            script,
        }
    }
}

mod strict_encoding {
    use super::*;
    use crate::paradigms::strict_encoding::StrictDecode;
    use crate::strict_encoding::{
        strategies, strict_decode, strict_encode, Error, Strategy, StrictEncode,
    };
    use std::io;

    impl Strategy for NodeId {
        type Strategy = strategies::HashFixedBytes;
    }

    impl Strategy for ContractId {
        type Strategy = strategies::HashFixedBytes;
    }

    // ![CONSENSUS-CRITICAL]: Commit encode is different for genesis from strict
    //                        encode since we only commit to chain genesis block
    //                        hash and not all chain parameters.
    // See <https://github.com/LNP-BP/LNPBPs/issues/58> for details.
    impl CommitEncode for Genesis {
        fn commit_encode<E: io::Write>(self, mut e: E) -> usize {
            let mut encoder = || -> Result<_, Error> {
                let mut len = self.schema_id.strict_encode(&mut e)?;
                len += self.chain.as_genesis_hash().strict_encode(&mut e)?;
                Ok(strict_encode_list!(e; len;
                    self.metadata,
                    self.owned_rights,
                    self.public_rights,
                    self.script
                ))
            };
            encoder().expect("Strict encoding of genesis data must not fail")
        }
    }

    impl StrictEncode for Genesis {
        fn strict_encode<E: io::Write>(
            &self,
            mut e: E,
        ) -> Result<usize, Error> {
            let chain_params = strict_encode(&self.chain)?;
            Ok(strict_encode_list!(e;
                self.schema_id,
                // ![NETWORK-CRITICAL]: Chain params fields may update, so we
                //                      will serialize chain parameters in all
                //                      known/legacy formats for compatibility.
                //                      Thus, they are serialized as a vector
                //                      of byte strings, each one representing
                //                      a next version of chain parameters
                //                      representation.
                // <https://github.com/LNP-BP/rust-lnpbp/issues/114>
                1usize,
                chain_params,
                self.metadata,
                self.owned_rights,
                self.public_rights,
                self.script
            ))
        }
    }

    impl StrictDecode for Genesis {
        fn strict_decode<D: io::Read>(mut d: D) -> Result<Self, Error> {
            let schema_id = SchemaId::strict_decode(&mut d)?;
            let chain_params_no = usize::strict_decode(&mut d)?;
            if chain_params_no < 1 {
                Err(Error::ValueOutOfRange(
                    "genesis must contain at least one `chain_param` data structure",
                    1u128..(u16::MAX as u128),
                    0,
                ))?
            }
            let chain_data = Vec::<u8>::strict_decode(&mut d)?;
            let chain = strict_decode(&chain_data)?;
            for _ in 1..chain_params_no {
                // Ignoring the rest of chain parameters
                let _ = Vec::<u8>::strict_decode(&mut d)?;
            }
            let metadata = Metadata::strict_decode(&mut d)?;
            let assignments = OwnedRights::strict_decode(&mut d)?;
            let valencies = PublicRights::strict_decode(&mut d)?;
            let script = SimplicityScript::strict_decode(&mut d)?;
            Ok(Self {
                schema_id,
                chain,
                metadata,
                owned_rights: assignments,
                public_rights: valencies,
                script,
            })
        }
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use crate::bp::chain::{Chain, GENESIS_HASH_MAINNET};
    use crate::commit_verify::CommitVerify;
    use crate::paradigms::strict_encoding::{test::*, StrictDecode};
    use crate::strict_encoding::{strict_encode, StrictEncode};
    use bitcoin_hashes::hex::{FromHex, ToHex};
    use std::io::Write;

    static TRANSITION: [u8; 2364] = [
        0xa, 0x0, 0x1, 0x0, 0xd, 0x0, 0x15, 0x0, 0x0, 0x2, 0x0, 0x3, 0x1, 0x2,
        0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x2, 0x3, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x8, 0x2, 0x8, 0x3, 0xa, 0x2, 0x0, 0x0, 0x0, 0xa, 0x3, 0x0, 0x0,
        0x0, 0xb, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb, 0x3, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x40, 0x12, 0x0, 0x0,
        0x40, 0x40, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x13, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x40, 0x20, 0x5, 0x0, 0x1, 0x2, 0x3, 0x4,
        0x5, 0x20, 0x5, 0x0, 0xa, 0x14, 0x1e, 0x28, 0x32, 0x21, 0x11, 0x0,
        0x4f, 0x6e, 0x65, 0x20, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x20, 0x53,
        0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x15, 0x0, 0x41, 0x6e, 0x6f, 0x74,
        0x68, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x20, 0x53,
        0x74, 0x72, 0x69, 0x6e, 0x67, 0x1, 0x0, 0xf5, 0x7e, 0xd2, 0x7e, 0xe4,
        0x19, 0x90, 0x72, 0xc5, 0xff, 0x3b, 0x77, 0x4f, 0xeb, 0xc9, 0x4d, 0x26,
        0xd3, 0xe4, 0xa5, 0x55, 0x9d, 0x13, 0x3d, 0xe4, 0x75, 0xa, 0x94, 0x8d,
        0xf5, 0xe, 0x6, 0x3, 0x0, 0x1, 0x0, 0x5, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3,
        0x0, 0x4, 0x0, 0x5, 0x0, 0x2, 0x0, 0x5, 0x0, 0xa, 0x0, 0x14, 0x0, 0x1e,
        0x0, 0x28, 0x0, 0x32, 0x0, 0x3, 0x0, 0x5, 0x0, 0x64, 0x0, 0xc8, 0x0,
        0x2c, 0x1, 0x90, 0x1, 0xf4, 0x1, 0x3, 0x0, 0x1, 0x0, 0x0, 0x4, 0x0,
        0x2, 0x24, 0xa5, 0xd4, 0xe1, 0xd0, 0x55, 0xa0, 0xc, 0x15, 0xc6, 0x61,
        0xcd, 0x6d, 0x6a, 0x55, 0xb8, 0x51, 0xaf, 0xfd, 0x90, 0x98, 0x9, 0x6c,
        0x3e, 0xf5, 0x31, 0xd4, 0xb, 0xee, 0x1b, 0x3c, 0x6b, 0x0, 0x53, 0x20,
        0xe, 0x17, 0xc, 0x8, 0xf2, 0x24, 0x2a, 0xd7, 0xba, 0xa0, 0x22, 0x55,
        0xb, 0x91, 0x8a, 0xd1, 0x4e, 0xe, 0xcc, 0x64, 0x12, 0x19, 0x71, 0xe3,
        0x7a, 0x19, 0x6b, 0xac, 0x43, 0xc8, 0x3, 0x0, 0xae, 0xe9, 0xa8, 0xc3,
        0x4c, 0x5d, 0x4f, 0x87, 0x6, 0xe, 0xf5, 0x8d, 0x94, 0xa, 0x75, 0xe4,
        0x3d, 0x13, 0x9d, 0x55, 0xa5, 0xe4, 0xd3, 0x26, 0x4d, 0xc9, 0xeb, 0x4f,
        0x77, 0x3b, 0xff, 0xc5, 0x72, 0x90, 0x19, 0xe4, 0x7e, 0xd2, 0x7e, 0xf5,
        0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0xad, 0xb1, 0x39, 0x64, 0xb, 0xb6, 0xb9,
        0x36, 0x8e, 0xaf, 0xd3, 0x36, 0xd, 0x65, 0x25, 0x89, 0x52, 0xf4, 0xd9,
        0x57, 0x5e, 0xac, 0x1b, 0x1f, 0x18, 0xee, 0x18, 0x51, 0x29, 0x71, 0x82,
        0x93, 0xb6, 0xd7, 0x62, 0x2b, 0x1e, 0xdd, 0x1f, 0x20, 0x1, 0x0, 0x0,
        0x0, 0x2, 0x0, 0x1, 0x3, 0x4, 0x0, 0x3, 0x0, 0x6e, 0x5a, 0x76, 0xca,
        0xd0, 0x21, 0x63, 0xa5, 0x6, 0xe, 0xf5, 0x8d, 0x94, 0xa, 0x75, 0xe4,
        0x3d, 0x13, 0x9d, 0x55, 0xa5, 0xe4, 0xd3, 0x26, 0x4d, 0xc9, 0xeb, 0x4f,
        0x77, 0x3b, 0xff, 0xc5, 0x72, 0x90, 0x19, 0xe4, 0x7e, 0xd2, 0x7e, 0xf5,
        0x1, 0x0, 0x0, 0x0, 0x21, 0x0, 0x8, 0xcc, 0x48, 0xfa, 0x5e, 0x5c, 0xb1,
        0xd2, 0xd2, 0x46, 0x5b, 0xd8, 0xc4, 0x37, 0xc0, 0xe0, 0x5, 0x14, 0xab,
        0xd8, 0x13, 0xf9, 0xa7, 0xdd, 0x50, 0x6a, 0x77, 0x84, 0x5, 0xa2, 0xc4,
        0x3b, 0xc0, 0xa3, 0x2, 0xdd, 0x8a, 0x81, 0xc2, 0xb1, 0x62, 0xe7, 0xb9,
        0xc8, 0xec, 0xe9, 0x64, 0xfc, 0x4f, 0x67, 0x56, 0xdb, 0x85, 0x34, 0x43,
        0x97, 0x3c, 0x84, 0xf9, 0x32, 0x45, 0x5e, 0x8c, 0x4c, 0x93, 0xd9, 0x19,
        0xb, 0x68, 0x4e, 0x5a, 0x15, 0xc7, 0x31, 0xb, 0x33, 0xa4, 0xc0, 0xbe,
        0xa6, 0x11, 0xc, 0x64, 0xa0, 0x24, 0x72, 0x79, 0xec, 0x12, 0x49, 0xc6,
        0x9f, 0x94, 0xeb, 0x5, 0x71, 0x7d, 0x81, 0x0, 0xe, 0x3f, 0x84, 0x8e,
        0x9f, 0xe9, 0x68, 0x2f, 0xa6, 0xa, 0xd8, 0x59, 0x57, 0xcf, 0x64, 0xb9,
        0x56, 0xb5, 0xfc, 0xcc, 0x2b, 0xdc, 0x9e, 0x4d, 0xdd, 0x78, 0x60, 0x63,
        0x12, 0x57, 0x12, 0xcd, 0xf3, 0x6f, 0xe2, 0xca, 0x1e, 0x19, 0x3a, 0xb,
        0x10, 0xc, 0x59, 0x97, 0xc, 0xde, 0xa8, 0x62, 0x42, 0x4a, 0x2f, 0x1e,
        0xeb, 0x89, 0x98, 0xc6, 0x31, 0x82, 0xc9, 0x4f, 0xf, 0xf1, 0xa5, 0x1a,
        0x37, 0x2d, 0x92, 0x86, 0x8c, 0xe5, 0x37, 0x3a, 0x86, 0xc4, 0x89, 0x9f,
        0xf4, 0xcf, 0x10, 0x7b, 0x9a, 0x30, 0xc0, 0x0, 0x97, 0x1e, 0x44, 0x9b,
        0xb2, 0x92, 0x1d, 0x38, 0x6e, 0x3a, 0xce, 0xea, 0x95, 0xcd, 0xcd, 0x63,
        0x74, 0x5e, 0x43, 0xf, 0xd3, 0xdd, 0x21, 0x2, 0xca, 0x91, 0xc5, 0x2d,
        0x9f, 0x21, 0x7b, 0x4d, 0x14, 0x9f, 0xf1, 0x88, 0xe5, 0x3a, 0x98, 0x6d,
        0x3, 0xdd, 0x64, 0x90, 0x73, 0x5a, 0x87, 0x1f, 0x53, 0x64, 0xe4, 0x9e,
        0x48, 0xfc, 0x1e, 0x3e, 0xcc, 0xeb, 0x5, 0xd3, 0xfd, 0x9a, 0x56, 0x5f,
        0x71, 0x51, 0x39, 0xe3, 0x10, 0xa8, 0xae, 0x20, 0xa8, 0xba, 0xca, 0x7b,
        0x91, 0x6, 0xe9, 0x61, 0x45, 0x69, 0x91, 0x94, 0xe0, 0xec, 0x50, 0xa4,
        0x12, 0x58, 0xe1, 0x64, 0xc2, 0x4c, 0x3c, 0x7f, 0x69, 0x7a, 0x7e, 0x4a,
        0xee, 0xed, 0xb, 0x91, 0x3e, 0x63, 0x71, 0x96, 0x99, 0x78, 0xf0, 0x3e,
        0x40, 0x96, 0x58, 0x9a, 0xd, 0xb9, 0x77, 0x79, 0xa2, 0xb7, 0xa3, 0x67,
        0xcf, 0xc2, 0x45, 0x27, 0xf0, 0x86, 0x3f, 0x8f, 0x60, 0xec, 0x17, 0x54,
        0x4, 0xa8, 0xf1, 0xce, 0x5f, 0xa2, 0x5b, 0xe9, 0xba, 0xb0, 0xac, 0x4f,
        0x5b, 0x47, 0xbb, 0xb6, 0xd8, 0x1, 0x7, 0x73, 0x24, 0xc4, 0x8b, 0xc8,
        0xe1, 0x15, 0xe4, 0xd2, 0x9f, 0xc5, 0x4, 0xed, 0x13, 0xc3, 0x17, 0xb8,
        0xc9, 0xdd, 0x84, 0x78, 0xea, 0x92, 0x4c, 0x41, 0x98, 0xc, 0x38, 0xc8,
        0x2, 0x20, 0xeb, 0xf2, 0x93, 0x75, 0x8f, 0xd7, 0x9d, 0x76, 0xfa, 0xfa,
        0xbb, 0x5e, 0xa1, 0x98, 0x51, 0xd6, 0xbd, 0x6, 0xa2, 0x37, 0x2, 0x89,
        0x10, 0xb9, 0x84, 0x69, 0xc7, 0xb7, 0xee, 0xec, 0xca, 0x2d, 0x13, 0xbb,
        0x8f, 0xb, 0xa5, 0x9f, 0x17, 0x6a, 0xb2, 0xef, 0x51, 0x39, 0x1f, 0xce,
        0x69, 0x8c, 0xc, 0x67, 0x67, 0x6f, 0x29, 0x29, 0x5, 0x5a, 0xcb, 0x17,
        0x6a, 0x8f, 0x1b, 0xe6, 0x1c, 0x32, 0xad, 0xf2, 0xda, 0xb3, 0xb6, 0xb8,
        0x6e, 0xae, 0x28, 0x9e, 0x7b, 0x12, 0x3f, 0x52, 0x26, 0xfd, 0x9c, 0xad,
        0x2b, 0x18, 0xb2, 0x6f, 0x33, 0xf, 0xf5, 0xab, 0x53, 0x8c, 0x9b, 0xbf,
        0xca, 0xe2, 0x1f, 0xfd, 0x91, 0xaa, 0x41, 0x26, 0x81, 0xdc, 0x1c, 0x9a,
        0xd4, 0x1d, 0xec, 0xd9, 0x48, 0x60, 0xc9, 0x7, 0x1c, 0xf8, 0x4d, 0x41,
        0xfc, 0x4, 0xe, 0xf0, 0x7d, 0xe3, 0x31, 0x7f, 0xc5, 0xcd, 0x5e, 0x84,
        0x3d, 0xda, 0x92, 0xfb, 0x71, 0xc3, 0x77, 0x2a, 0xae, 0x39, 0x65, 0x16,
        0x24, 0x7d, 0x7c, 0x61, 0xcd, 0xdd, 0xe3, 0x50, 0x54, 0x44, 0xc4, 0x30,
        0x98, 0xfc, 0x62, 0xb9, 0xad, 0x20, 0x7b, 0x2b, 0x5b, 0xf1, 0xf6, 0xe5,
        0x3e, 0xf4, 0xe0, 0xaf, 0x7a, 0xeb, 0xe6, 0xee, 0xe7, 0x21, 0xc, 0xf1,
        0x54, 0xbc, 0xe7, 0xe4, 0x19, 0xd9, 0xfd, 0x1d, 0x1b, 0x2f, 0xad, 0xeb,
        0xe4, 0x27, 0x73, 0xd, 0xcd, 0xb8, 0x7a, 0x7e, 0xe7, 0x4b, 0x8d, 0xce,
        0x83, 0x91, 0x1, 0x82, 0x62, 0xb1, 0xb0, 0xad, 0x32, 0x6f, 0xb6, 0xe2,
        0xff, 0x10, 0x5c, 0x83, 0x13, 0xa4, 0x6f, 0xe7, 0xaa, 0x7, 0xf0, 0xc4,
        0x3c, 0x42, 0x51, 0xd9, 0xc7, 0x70, 0x4, 0xf, 0x6e, 0x2c, 0x5c, 0x67,
        0x2d, 0xd2, 0x3, 0x69, 0xa, 0x45, 0x9b, 0xa9, 0x6e, 0xd0, 0x6c, 0x7e,
        0xfb, 0xf3, 0x15, 0xa0, 0x8d, 0x31, 0xb0, 0x7d, 0x83, 0xc, 0xa9, 0xbf,
        0xa8, 0xcc, 0x13, 0x33, 0x61, 0xdf, 0x2f, 0x7e, 0x4d, 0xd3, 0xe, 0x94,
        0x0, 0xa4, 0x49, 0xcc, 0xf, 0x32, 0x93, 0x1, 0xdc, 0xf1, 0x56, 0xfe,
        0x14, 0xa0, 0x95, 0x96, 0xf6, 0xe5, 0x23, 0x2, 0xb7, 0xce, 0x71, 0x2c,
        0xa6, 0x7e, 0x67, 0x7a, 0x59, 0x84, 0x5c, 0xc5, 0xbe, 0x66, 0xd4, 0x73,
        0x3a, 0xbd, 0xf9, 0xa3, 0xd4, 0x7a, 0x66, 0xaf, 0xe, 0x46, 0x2d, 0x6d,
        0x2c, 0x5b, 0x31, 0xf9, 0x51, 0x5, 0xa6, 0xa4, 0x49, 0xbd, 0xf3, 0x5,
        0x6d, 0x98, 0x56, 0xa6, 0xce, 0xea, 0x15, 0x1, 0x0, 0xa, 0xa2, 0x7f,
        0x61, 0x42, 0xef, 0x52, 0xbc, 0x8e, 0xaf, 0xd3, 0x36, 0xd, 0x65, 0x25,
        0x89, 0x52, 0xf4, 0xd9, 0x57, 0x5e, 0xac, 0x1b, 0x1f, 0x18, 0xee, 0x18,
        0x51, 0x29, 0x71, 0x82, 0x93, 0xb6, 0xd7, 0x62, 0x2b, 0x1e, 0xdd, 0x1f,
        0x20, 0x1, 0x0, 0x0, 0x0, 0x3, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x20, 0x0, 0xde, 0xbb, 0xbe, 0xfd, 0x16, 0x83, 0xe3, 0x35, 0x29, 0x6a,
        0xc, 0x86, 0xf1, 0xc8, 0x82, 0xa2, 0xea, 0x37, 0x59, 0xf1, 0x14, 0x22,
        0xb, 0xb, 0x2c, 0xf8, 0x69, 0xe3, 0x7d, 0xec, 0x24, 0xc8, 0x0, 0xb3,
        0x2a, 0x56, 0xa6, 0xc7, 0x2, 0x56, 0x33, 0x79, 0xad, 0x65, 0xd0, 0x7a,
        0x2c, 0x80, 0xe0, 0x46, 0x73, 0xaf, 0x85, 0x59, 0x52, 0x58, 0xfc, 0x15,
        0x60, 0xff, 0xd8, 0x47, 0x1a, 0xd7, 0x32, 0x21, 0x0, 0x8, 0x97, 0x75,
        0xf8, 0x29, 0xc8, 0xad, 0xad, 0x92, 0xad, 0xa1, 0x7b, 0x59, 0x31, 0xed,
        0xf6, 0x30, 0x64, 0xd5, 0x46, 0x78, 0xf4, 0xeb, 0x9a, 0x6f, 0xdf, 0xe8,
        0xe4, 0xcb, 0x5d, 0x95, 0xf6, 0xf4, 0xa3, 0x2, 0x3b, 0x4d, 0x5a, 0x83,
        0xe1, 0x98, 0x44, 0x23, 0xd7, 0xc8, 0xe3, 0xc8, 0x35, 0xf, 0x42, 0xc,
        0xca, 0x90, 0xc5, 0xa4, 0xa7, 0x3f, 0xea, 0x62, 0x69, 0xe4, 0x78, 0xbc,
        0x63, 0x94, 0x76, 0xfb, 0xb6, 0x64, 0xa9, 0xf7, 0x81, 0x70, 0xc6, 0xd,
        0xa3, 0x70, 0x5, 0xc1, 0xc8, 0x94, 0x7f, 0x20, 0xff, 0x83, 0x8c, 0xc4,
        0x7a, 0x26, 0xd3, 0x84, 0xab, 0x51, 0x15, 0xfc, 0xb1, 0x57, 0x2d, 0xb3,
        0x9, 0x1b, 0xc8, 0x6d, 0x32, 0xfd, 0x52, 0x70, 0xa, 0xf1, 0x47, 0xe2,
        0xc4, 0xa8, 0x5c, 0x5e, 0x95, 0x18, 0xc8, 0x46, 0xa9, 0xa3, 0xd0, 0xda,
        0x76, 0xce, 0xbf, 0xdb, 0x31, 0x27, 0x4b, 0x68, 0x58, 0xe5, 0x36, 0x13,
        0x54, 0x29, 0x94, 0x4c, 0x30, 0x23, 0x4c, 0xc, 0x6a, 0x3a, 0x5, 0x15,
        0x70, 0x97, 0x8a, 0x3e, 0xc5, 0x82, 0x96, 0x65, 0x56, 0x69, 0xc0, 0x4d,
        0x58, 0x5b, 0x8a, 0x85, 0x39, 0x84, 0x29, 0x9b, 0xa5, 0x9b, 0xe4, 0xc4,
        0x79, 0x5b, 0x8b, 0xe1, 0x17, 0x25, 0x10, 0x22, 0x4, 0x5, 0x44, 0xe5,
        0x68, 0x72, 0x80, 0x88, 0xd5, 0x23, 0x22, 0x19, 0x8d, 0xca, 0xa5, 0x26,
        0xc4, 0x73, 0xdb, 0x6, 0x96, 0xb7, 0xe, 0x28, 0xc6, 0xa, 0xc3, 0x65,
        0x5c, 0x9c, 0x3, 0xf3, 0x1d, 0xc9, 0x53, 0x34, 0x6a, 0x85, 0x1, 0xe2,
        0x3c, 0x91, 0x6d, 0x70, 0xe1, 0x4d, 0xa2, 0xa, 0x67, 0x50, 0xb0, 0xe2,
        0x12, 0x1f, 0xba, 0x68, 0xdc, 0xd, 0x35, 0x3b, 0x32, 0xa7, 0x2b, 0xe7,
        0x91, 0x6d, 0xb2, 0xe0, 0xf4, 0xb8, 0xb1, 0x6d, 0xab, 0xa6, 0x46, 0xd5,
        0x4, 0x5a, 0x5d, 0xf1, 0x8f, 0x2d, 0x52, 0x6a, 0xb8, 0x50, 0xf3, 0x22,
        0x4e, 0xb1, 0x24, 0xa8, 0xa1, 0x15, 0x34, 0xbc, 0x3f, 0xda, 0x8c, 0xc6,
        0xc8, 0x53, 0x2b, 0xd0, 0x9f, 0xa8, 0x72, 0x3e, 0xc1, 0x6a, 0x3a, 0x51,
        0xb1, 0x99, 0x80, 0x1b, 0xae, 0x2d, 0x4c, 0x79, 0xa0, 0x10, 0x2b, 0x7,
        0x4a, 0xa, 0x65, 0x3a, 0x82, 0xe4, 0x1f, 0xbb, 0x9c, 0x6e, 0x20, 0xa5,
        0x1b, 0x17, 0xdc, 0xa7, 0x6f, 0x77, 0x22, 0xd, 0xb9, 0xc2, 0xf6, 0xa7,
        0xe1, 0x8d, 0x88, 0x88, 0xdc, 0x44, 0x68, 0xbd, 0x25, 0x42, 0x5f, 0x20,
        0x1b, 0x84, 0x15, 0x56, 0x5, 0x95, 0x9c, 0x40, 0xef, 0xa1, 0x71, 0xaa,
        0xc7, 0x82, 0x8, 0x39, 0xf4, 0x58, 0xae, 0x39, 0x50, 0xac, 0xc7, 0x53,
        0xff, 0x5, 0xb0, 0x29, 0x9d, 0x54, 0x4f, 0x8d, 0x1a, 0x81, 0x61, 0xc2,
        0x71, 0xc, 0x2f, 0xdb, 0x1b, 0x1b, 0xa7, 0x4f, 0x1a, 0x4a, 0xa2, 0xa9,
        0x8c, 0x2c, 0x1, 0xe7, 0xf9, 0xf, 0x85, 0xc1, 0x33, 0xe7, 0x39, 0x8f,
        0x43, 0x40, 0x30, 0x27, 0xeb, 0xad, 0x7e, 0xef, 0x22, 0xf8, 0xb5, 0x51,
        0xe5, 0xb3, 0x7c, 0x2a, 0x45, 0x88, 0x93, 0xac, 0xea, 0x6a, 0x51, 0x63,
        0x79, 0x45, 0x35, 0xfd, 0x9d, 0xd4, 0x55, 0x98, 0xd, 0xf4, 0x29, 0x7c,
        0xfc, 0x93, 0x52, 0xa4, 0x61, 0x6c, 0x1a, 0xcf, 0x5, 0x5a, 0x3e, 0x44,
        0x82, 0x6c, 0x44, 0x7e, 0x6e, 0xb2, 0xad, 0x5a, 0x3, 0x72, 0x2f, 0xed,
        0x77, 0x44, 0x16, 0xd1, 0x59, 0xa8, 0x10, 0x2d, 0x8, 0x6c, 0xd6, 0xb2,
        0x38, 0x95, 0x4c, 0x37, 0x54, 0x2e, 0x8d, 0xdc, 0xd6, 0x34, 0xe5, 0xe2,
        0x64, 0x9b, 0x57, 0x26, 0x38, 0x28, 0xd, 0x46, 0x7e, 0xc3, 0x1, 0xcc,
        0x36, 0x48, 0xe9, 0xd1, 0x9a, 0x9f, 0x29, 0xa1, 0xac, 0x53, 0xdd, 0xf,
        0x8a, 0x51, 0x5d, 0xe3, 0x18, 0x19, 0xcf, 0x93, 0x82, 0x95, 0x5b, 0x69,
        0x8e, 0xf, 0xab, 0x2, 0x17, 0xfa, 0xa7, 0x9, 0x35, 0xf2, 0x9, 0x39,
        0xe2, 0x5b, 0x36, 0x90, 0xa8, 0x46, 0x9c, 0xf3, 0x58, 0x29, 0x0, 0xb1,
        0xb0, 0xdd, 0xdc, 0x41, 0xf6, 0xa, 0x99, 0xe1, 0xff, 0x2b, 0xe8, 0x1d,
        0x3c, 0x86, 0x8e, 0xff, 0x9f, 0xed, 0x3e, 0x98, 0x5d, 0x24, 0xfc, 0x58,
        0xd7, 0x13, 0x12, 0xa7, 0x74, 0x5e, 0x3e, 0x44, 0x68, 0x7d, 0x11, 0x0,
        0x44, 0xb1, 0x28, 0x4f, 0x85, 0x1e, 0x92, 0x5a, 0x3c, 0xc6, 0x77, 0x70,
        0x4, 0x43, 0x1c, 0x81, 0x41, 0x65, 0xd2, 0x33, 0x77, 0x91, 0xd1, 0xab,
        0xe5, 0x97, 0x90, 0x1f, 0x7b, 0xe6, 0xbb, 0xcc, 0xb3, 0x65, 0x61, 0x57,
        0x6d, 0x60, 0xa6, 0x93, 0x79, 0x3d, 0x70, 0x43, 0x92, 0x5, 0x4b, 0x2,
        0x67, 0xea, 0x78, 0x8b, 0x12, 0xba, 0x85, 0x9c, 0x2b, 0xda, 0x7b, 0xb,
        0xed, 0x3c, 0xe8, 0xca, 0xa4, 0x64, 0xe4, 0x9b, 0x9c, 0xa8, 0x5c, 0x5c,
        0xe2, 0xa7, 0x82, 0xea, 0x4c, 0x79, 0x77, 0x4, 0xf1, 0x0, 0x5, 0xad,
        0x2f, 0x72, 0x3d, 0x95, 0xe5, 0x8, 0x50, 0x48, 0x2e, 0x80, 0x5d, 0x54,
        0x67, 0xf9, 0x41, 0xf1, 0x1d, 0xb6, 0x86, 0x6, 0x73, 0xa, 0xaf, 0x99,
        0x7d, 0x2c, 0x30, 0xa6, 0xc9, 0xbc, 0x7d, 0x39, 0x16, 0x3, 0x55, 0x85,
        0x63, 0xe8, 0x69, 0x36, 0x2a, 0xc2, 0xba, 0x5b, 0xf, 0x49, 0x1d, 0x2,
        0xb4, 0xe1, 0x12, 0xf1, 0xe6, 0x9b, 0xaf, 0xd4, 0x78, 0xd9, 0xaf, 0x7b,
        0x5f, 0x50, 0xa5, 0x86, 0x32, 0xbc, 0x36, 0xe4, 0x96, 0x11, 0xef, 0xf8,
        0xb4, 0xd4, 0x91, 0xf7, 0xd7, 0x43, 0x15, 0x28, 0x3, 0x1e, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x5d, 0x35, 0x74, 0xc4, 0xd9, 0x9c,
        0x8, 0xef, 0x95, 0x6, 0x19, 0xbe, 0x72, 0xbf, 0xa1, 0xd5, 0xa, 0xe3,
        0xc1, 0x53, 0xd1, 0xf3, 0xf, 0x64, 0xbc, 0x1a, 0xc0, 0x8d, 0xe9, 0x9e,
        0xa5, 0x56, 0x3, 0x0, 0x2, 0x4, 0x0, 0x2, 0x3a, 0xa, 0x34, 0xc8, 0xd,
        0xdb, 0x3e, 0xac, 0x5c, 0xd5, 0x92, 0x38, 0x30, 0x81, 0x4d, 0x72, 0xf9,
        0xde, 0x9, 0x6b, 0xca, 0x74, 0x87, 0x79, 0xda, 0x39, 0x7a, 0xa3, 0xb7,
        0x71, 0xfe, 0x7e, 0x40, 0xc6, 0x41, 0x1a, 0xea, 0x8, 0x2e, 0x2c, 0x5d,
        0x74, 0x34, 0x73, 0x68, 0x67, 0x7d, 0xb6, 0x95, 0x45, 0x12, 0x62, 0x37,
        0xd5, 0xed, 0x78, 0xfa, 0xa0, 0x84, 0x63, 0x52, 0xf5, 0x38, 0x3f, 0x95,
        0x3, 0x0, 0xfd, 0xb7, 0x19, 0xd1, 0x24, 0xce, 0xff, 0x58, 0x6, 0xe,
        0xf5, 0x8d, 0x94, 0xa, 0x75, 0xe4, 0x3d, 0x13, 0x9d, 0x55, 0xa5, 0xe4,
        0xd3, 0x26, 0x4d, 0xc9, 0xeb, 0x4f, 0x77, 0x3b, 0xff, 0xc5, 0x72, 0x90,
        0x19, 0xe4, 0x7e, 0xd2, 0x7e, 0xf5, 0x1, 0x0, 0x0, 0x0, 0x64, 0x20,
        0xcc, 0x42, 0x1e, 0x11, 0x89, 0x80, 0x5c, 0x8c, 0xec, 0x8, 0x9d, 0x74,
        0xc1, 0x98, 0xf, 0x79, 0xc0, 0x69, 0x0, 0x5a, 0x21, 0xae, 0x40, 0xa7,
        0xe5, 0x8e, 0x68, 0x77, 0xa8, 0x10, 0x7b, 0x4, 0x9, 0x1a, 0x9a, 0x97,
        0x1, 0x2, 0x90, 0xe5, 0x10, 0xa2, 0x10, 0x60, 0xad, 0xa3, 0x39, 0x71,
        0xd, 0xd, 0xdc, 0x43, 0xe4, 0x46, 0x0, 0x6c, 0x5b, 0xc9, 0x38, 0x64,
        0xda, 0xfb, 0x3, 0xcf, 0x4b, 0xa4, 0x72, 0xbe, 0xdf, 0x5c, 0xa7, 0x1,
        0x0, 0x47, 0xe7, 0xd3, 0x5d, 0x93, 0xe4, 0xb5, 0x62, 0x8e, 0xaf, 0xd3,
        0x36, 0xd, 0x65, 0x25, 0x89, 0x52, 0xf4, 0xd9, 0x57, 0x5e, 0xac, 0x1b,
        0x1f, 0x18, 0xee, 0x18, 0x51, 0x29, 0x71, 0x82, 0x93, 0xb6, 0xd7, 0x62,
        0x2b, 0x1e, 0xdd, 0x1f, 0x20, 0x1, 0x0, 0x0, 0x0, 0x40, 0xe7, 0xa,
        0x36, 0xe2, 0xce, 0x51, 0xd3, 0x1d, 0x4c, 0xf5, 0xd6, 0x73, 0x1f, 0xa6,
        0x37, 0x38, 0x64, 0x81, 0x27, 0xdb, 0x83, 0x37, 0x15, 0xd3, 0x96, 0x52,
        0xd8, 0x6d, 0x92, 0x7d, 0x48, 0x88, 0x3, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3,
        0x0, 0x5, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5,
    ];

    static GENESIS: [u8; 2462] = [
        0x20, 0x1f, 0xdd, 0x1e, 0x2b, 0x62, 0xd7, 0xb6, 0x93, 0x82, 0x71, 0x29,
        0x51, 0x18, 0xee, 0x18, 0x1f, 0x1b, 0xac, 0x5e, 0x57, 0xd9, 0xf4, 0x52,
        0x89, 0x25, 0x65, 0xd, 0x36, 0xd3, 0xaf, 0x8e, 0x01, 0x00, 0x8e, 0x00,
        0x6f, 0xe2, 0x8c, 0xa, 0xb6, 0xf1, 0xb3, 0x72, 0xc1, 0xa6, 0xa2, 0x46,
        0xae, 0x63, 0xf7, 0x4f, 0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x8, 0x9c,
        0x68, 0xd6, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x62, 0x69, 0x74,
        0x63, 0x6f, 0x69, 0x6e, 0xf9, 0xbe, 0xb4, 0xd9, 0x4, 0x0, 0x6d, 0x61,
        0x69, 0x6e, 0x2, 0x0, 0x62, 0x63, 0x8d, 0x20, 0x8c, 0x20, 0xb4, 0xb2,
        0x7, 0x0, 0x10, 0xeb, 0x9, 0x0, 0x0, 0x22, 0x2, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x3, 0x0, 0x42, 0x54, 0x43, 0x7, 0x0, 0x42, 0x69, 0x74, 0x63,
        0x6f, 0x69, 0x6e, 0x7, 0x0, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69,
        0x0, 0xe1, 0xf5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x6f, 0xe2, 0x8c, 0xa, 0xb6,
        0xf1, 0xb3, 0x72, 0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f, 0x93,
        0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x8, 0x9c, 0x68, 0xd6, 0x19, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0xd, 0x0, 0x15, 0x0, 0x0, 0x2,
        0x0, 0x3, 0x1, 0x2, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x2, 0x3, 0x0, 0x0,
        0x0, 0x3, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x3, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x2, 0x8, 0x3, 0xa, 0x2, 0x0, 0x0, 0x0,
        0xa, 0x3, 0x0, 0x0, 0x0, 0xb, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0xb, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x40,
        0x12, 0x0, 0x0, 0x40, 0x40, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x40, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x40, 0x20, 0x5, 0x0,
        0x1, 0x2, 0x3, 0x4, 0x5, 0x20, 0x5, 0x0, 0xa, 0x14, 0x1e, 0x28, 0x32,
        0x21, 0x11, 0x0, 0x4f, 0x6e, 0x65, 0x20, 0x52, 0x61, 0x6e, 0x64, 0x6f,
        0x6d, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x15, 0x0, 0x41,
        0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6e, 0x64, 0x6f,
        0x6d, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3, 0x0, 0x1, 0x0,
        0x0, 0x4, 0x0, 0x2, 0x24, 0xa5, 0xd4, 0xe1, 0xd0, 0x55, 0xa0, 0xc,
        0x15, 0xc6, 0x61, 0xcd, 0x6d, 0x6a, 0x55, 0xb8, 0x51, 0xaf, 0xfd, 0x90,
        0x98, 0x9, 0x6c, 0x3e, 0xf5, 0x31, 0xd4, 0xb, 0xee, 0x1b, 0x3c, 0x6b,
        0x0, 0x53, 0x20, 0xe, 0x17, 0xc, 0x8, 0xf2, 0x24, 0x2a, 0xd7, 0xba,
        0xa0, 0x22, 0x55, 0xb, 0x91, 0x8a, 0xd1, 0x4e, 0xe, 0xcc, 0x64, 0x12,
        0x19, 0x71, 0xe3, 0x7a, 0x19, 0x6b, 0xac, 0x43, 0xc8, 0x3, 0x0, 0xae,
        0xe9, 0xa8, 0xc3, 0x4c, 0x5d, 0x4f, 0x87, 0x6, 0xe, 0xf5, 0x8d, 0x94,
        0xa, 0x75, 0xe4, 0x3d, 0x13, 0x9d, 0x55, 0xa5, 0xe4, 0xd3, 0x26, 0x4d,
        0xc9, 0xeb, 0x4f, 0x77, 0x3b, 0xff, 0xc5, 0x72, 0x90, 0x19, 0xe4, 0x7e,
        0xd2, 0x7e, 0xf5, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0xad, 0xb1, 0x39, 0x64,
        0xb, 0xb6, 0xb9, 0x36, 0x8e, 0xaf, 0xd3, 0x36, 0xd, 0x65, 0x25, 0x89,
        0x52, 0xf4, 0xd9, 0x57, 0x5e, 0xac, 0x1b, 0x1f, 0x18, 0xee, 0x18, 0x51,
        0x29, 0x71, 0x82, 0x93, 0xb6, 0xd7, 0x62, 0x2b, 0x1e, 0xdd, 0x1f, 0x20,
        0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x1, 0x3, 0x4, 0x0, 0x3, 0x0, 0x6e, 0x5a,
        0x76, 0xca, 0xd0, 0x21, 0x63, 0xa5, 0x6, 0xe, 0xf5, 0x8d, 0x94, 0xa,
        0x75, 0xe4, 0x3d, 0x13, 0x9d, 0x55, 0xa5, 0xe4, 0xd3, 0x26, 0x4d, 0xc9,
        0xeb, 0x4f, 0x77, 0x3b, 0xff, 0xc5, 0x72, 0x90, 0x19, 0xe4, 0x7e, 0xd2,
        0x7e, 0xf5, 0x1, 0x0, 0x0, 0x0, 0x21, 0x0, 0x8, 0xcc, 0x48, 0xfa, 0x5e,
        0x5c, 0xb1, 0xd2, 0xd2, 0x46, 0x5b, 0xd8, 0xc4, 0x37, 0xc0, 0xe0, 0x5,
        0x14, 0xab, 0xd8, 0x13, 0xf9, 0xa7, 0xdd, 0x50, 0x6a, 0x77, 0x84, 0x5,
        0xa2, 0xc4, 0x3b, 0xc0, 0xa3, 0x2, 0xdd, 0x8a, 0x81, 0xc2, 0xb1, 0x62,
        0xe7, 0xb9, 0xc8, 0xec, 0xe9, 0x64, 0xfc, 0x4f, 0x67, 0x56, 0xdb, 0x85,
        0x34, 0x43, 0x97, 0x3c, 0x84, 0xf9, 0x32, 0x45, 0x5e, 0x8c, 0x4c, 0x93,
        0xd9, 0x19, 0xb, 0x68, 0x4e, 0x5a, 0x15, 0xc7, 0x31, 0xb, 0x33, 0xa4,
        0xc0, 0xbe, 0xa6, 0x11, 0xc, 0x64, 0xa0, 0x24, 0x72, 0x79, 0xec, 0x12,
        0x49, 0xc6, 0x9f, 0x94, 0xeb, 0x5, 0x71, 0x7d, 0x81, 0x0, 0xe, 0x3f,
        0x84, 0x8e, 0x9f, 0xe9, 0x68, 0x2f, 0xa6, 0xa, 0xd8, 0x59, 0x57, 0xcf,
        0x64, 0xb9, 0x56, 0xb5, 0xfc, 0xcc, 0x2b, 0xdc, 0x9e, 0x4d, 0xdd, 0x78,
        0x60, 0x63, 0x12, 0x57, 0x12, 0xcd, 0xf3, 0x6f, 0xe2, 0xca, 0x1e, 0x19,
        0x3a, 0xb, 0x10, 0xc, 0x59, 0x97, 0xc, 0xde, 0xa8, 0x62, 0x42, 0x4a,
        0x2f, 0x1e, 0xeb, 0x89, 0x98, 0xc6, 0x31, 0x82, 0xc9, 0x4f, 0xf, 0xf1,
        0xa5, 0x1a, 0x37, 0x2d, 0x92, 0x86, 0x8c, 0xe5, 0x37, 0x3a, 0x86, 0xc4,
        0x89, 0x9f, 0xf4, 0xcf, 0x10, 0x7b, 0x9a, 0x30, 0xc0, 0x0, 0x97, 0x1e,
        0x44, 0x9b, 0xb2, 0x92, 0x1d, 0x38, 0x6e, 0x3a, 0xce, 0xea, 0x95, 0xcd,
        0xcd, 0x63, 0x74, 0x5e, 0x43, 0xf, 0xd3, 0xdd, 0x21, 0x2, 0xca, 0x91,
        0xc5, 0x2d, 0x9f, 0x21, 0x7b, 0x4d, 0x14, 0x9f, 0xf1, 0x88, 0xe5, 0x3a,
        0x98, 0x6d, 0x3, 0xdd, 0x64, 0x90, 0x73, 0x5a, 0x87, 0x1f, 0x53, 0x64,
        0xe4, 0x9e, 0x48, 0xfc, 0x1e, 0x3e, 0xcc, 0xeb, 0x5, 0xd3, 0xfd, 0x9a,
        0x56, 0x5f, 0x71, 0x51, 0x39, 0xe3, 0x10, 0xa8, 0xae, 0x20, 0xa8, 0xba,
        0xca, 0x7b, 0x91, 0x6, 0xe9, 0x61, 0x45, 0x69, 0x91, 0x94, 0xe0, 0xec,
        0x50, 0xa4, 0x12, 0x58, 0xe1, 0x64, 0xc2, 0x4c, 0x3c, 0x7f, 0x69, 0x7a,
        0x7e, 0x4a, 0xee, 0xed, 0xb, 0x91, 0x3e, 0x63, 0x71, 0x96, 0x99, 0x78,
        0xf0, 0x3e, 0x40, 0x96, 0x58, 0x9a, 0xd, 0xb9, 0x77, 0x79, 0xa2, 0xb7,
        0xa3, 0x67, 0xcf, 0xc2, 0x45, 0x27, 0xf0, 0x86, 0x3f, 0x8f, 0x60, 0xec,
        0x17, 0x54, 0x4, 0xa8, 0xf1, 0xce, 0x5f, 0xa2, 0x5b, 0xe9, 0xba, 0xb0,
        0xac, 0x4f, 0x5b, 0x47, 0xbb, 0xb6, 0xd8, 0x1, 0x7, 0x73, 0x24, 0xc4,
        0x8b, 0xc8, 0xe1, 0x15, 0xe4, 0xd2, 0x9f, 0xc5, 0x4, 0xed, 0x13, 0xc3,
        0x17, 0xb8, 0xc9, 0xdd, 0x84, 0x78, 0xea, 0x92, 0x4c, 0x41, 0x98, 0xc,
        0x38, 0xc8, 0x2, 0x20, 0xeb, 0xf2, 0x93, 0x75, 0x8f, 0xd7, 0x9d, 0x76,
        0xfa, 0xfa, 0xbb, 0x5e, 0xa1, 0x98, 0x51, 0xd6, 0xbd, 0x6, 0xa2, 0x37,
        0x2, 0x89, 0x10, 0xb9, 0x84, 0x69, 0xc7, 0xb7, 0xee, 0xec, 0xca, 0x2d,
        0x13, 0xbb, 0x8f, 0xb, 0xa5, 0x9f, 0x17, 0x6a, 0xb2, 0xef, 0x51, 0x39,
        0x1f, 0xce, 0x69, 0x8c, 0xc, 0x67, 0x67, 0x6f, 0x29, 0x29, 0x5, 0x5a,
        0xcb, 0x17, 0x6a, 0x8f, 0x1b, 0xe6, 0x1c, 0x32, 0xad, 0xf2, 0xda, 0xb3,
        0xb6, 0xb8, 0x6e, 0xae, 0x28, 0x9e, 0x7b, 0x12, 0x3f, 0x52, 0x26, 0xfd,
        0x9c, 0xad, 0x2b, 0x18, 0xb2, 0x6f, 0x33, 0xf, 0xf5, 0xab, 0x53, 0x8c,
        0x9b, 0xbf, 0xca, 0xe2, 0x1f, 0xfd, 0x91, 0xaa, 0x41, 0x26, 0x81, 0xdc,
        0x1c, 0x9a, 0xd4, 0x1d, 0xec, 0xd9, 0x48, 0x60, 0xc9, 0x7, 0x1c, 0xf8,
        0x4d, 0x41, 0xfc, 0x4, 0xe, 0xf0, 0x7d, 0xe3, 0x31, 0x7f, 0xc5, 0xcd,
        0x5e, 0x84, 0x3d, 0xda, 0x92, 0xfb, 0x71, 0xc3, 0x77, 0x2a, 0xae, 0x39,
        0x65, 0x16, 0x24, 0x7d, 0x7c, 0x61, 0xcd, 0xdd, 0xe3, 0x50, 0x54, 0x44,
        0xc4, 0x30, 0x98, 0xfc, 0x62, 0xb9, 0xad, 0x20, 0x7b, 0x2b, 0x5b, 0xf1,
        0xf6, 0xe5, 0x3e, 0xf4, 0xe0, 0xaf, 0x7a, 0xeb, 0xe6, 0xee, 0xe7, 0x21,
        0xc, 0xf1, 0x54, 0xbc, 0xe7, 0xe4, 0x19, 0xd9, 0xfd, 0x1d, 0x1b, 0x2f,
        0xad, 0xeb, 0xe4, 0x27, 0x73, 0xd, 0xcd, 0xb8, 0x7a, 0x7e, 0xe7, 0x4b,
        0x8d, 0xce, 0x83, 0x91, 0x1, 0x82, 0x62, 0xb1, 0xb0, 0xad, 0x32, 0x6f,
        0xb6, 0xe2, 0xff, 0x10, 0x5c, 0x83, 0x13, 0xa4, 0x6f, 0xe7, 0xaa, 0x7,
        0xf0, 0xc4, 0x3c, 0x42, 0x51, 0xd9, 0xc7, 0x70, 0x4, 0xf, 0x6e, 0x2c,
        0x5c, 0x67, 0x2d, 0xd2, 0x3, 0x69, 0xa, 0x45, 0x9b, 0xa9, 0x6e, 0xd0,
        0x6c, 0x7e, 0xfb, 0xf3, 0x15, 0xa0, 0x8d, 0x31, 0xb0, 0x7d, 0x83, 0xc,
        0xa9, 0xbf, 0xa8, 0xcc, 0x13, 0x33, 0x61, 0xdf, 0x2f, 0x7e, 0x4d, 0xd3,
        0xe, 0x94, 0x0, 0xa4, 0x49, 0xcc, 0xf, 0x32, 0x93, 0x1, 0xdc, 0xf1,
        0x56, 0xfe, 0x14, 0xa0, 0x95, 0x96, 0xf6, 0xe5, 0x23, 0x2, 0xb7, 0xce,
        0x71, 0x2c, 0xa6, 0x7e, 0x67, 0x7a, 0x59, 0x84, 0x5c, 0xc5, 0xbe, 0x66,
        0xd4, 0x73, 0x3a, 0xbd, 0xf9, 0xa3, 0xd4, 0x7a, 0x66, 0xaf, 0xe, 0x46,
        0x2d, 0x6d, 0x2c, 0x5b, 0x31, 0xf9, 0x51, 0x5, 0xa6, 0xa4, 0x49, 0xbd,
        0xf3, 0x5, 0x6d, 0x98, 0x56, 0xa6, 0xce, 0xea, 0x15, 0x1, 0x0, 0xa,
        0xa2, 0x7f, 0x61, 0x42, 0xef, 0x52, 0xbc, 0x8e, 0xaf, 0xd3, 0x36, 0xd,
        0x65, 0x25, 0x89, 0x52, 0xf4, 0xd9, 0x57, 0x5e, 0xac, 0x1b, 0x1f, 0x18,
        0xee, 0x18, 0x51, 0x29, 0x71, 0x82, 0x93, 0xb6, 0xd7, 0x62, 0x2b, 0x1e,
        0xdd, 0x1f, 0x20, 0x1, 0x0, 0x0, 0x0, 0x3, 0xa, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x20, 0x0, 0xde, 0xbb, 0xbe, 0xfd, 0x16, 0x83, 0xe3,
        0x35, 0x29, 0x6a, 0xc, 0x86, 0xf1, 0xc8, 0x82, 0xa2, 0xea, 0x37, 0x59,
        0xf1, 0x14, 0x22, 0xb, 0xb, 0x2c, 0xf8, 0x69, 0xe3, 0x7d, 0xec, 0x24,
        0xc8, 0x0, 0xb3, 0x2a, 0x56, 0xa6, 0xc7, 0x2, 0x56, 0x33, 0x79, 0xad,
        0x65, 0xd0, 0x7a, 0x2c, 0x80, 0xe0, 0x46, 0x73, 0xaf, 0x85, 0x59, 0x52,
        0x58, 0xfc, 0x15, 0x60, 0xff, 0xd8, 0x47, 0x1a, 0xd7, 0x32, 0x21, 0x0,
        0x8, 0x97, 0x75, 0xf8, 0x29, 0xc8, 0xad, 0xad, 0x92, 0xad, 0xa1, 0x7b,
        0x59, 0x31, 0xed, 0xf6, 0x30, 0x64, 0xd5, 0x46, 0x78, 0xf4, 0xeb, 0x9a,
        0x6f, 0xdf, 0xe8, 0xe4, 0xcb, 0x5d, 0x95, 0xf6, 0xf4, 0xa3, 0x2, 0x3b,
        0x4d, 0x5a, 0x83, 0xe1, 0x98, 0x44, 0x23, 0xd7, 0xc8, 0xe3, 0xc8, 0x35,
        0xf, 0x42, 0xc, 0xca, 0x90, 0xc5, 0xa4, 0xa7, 0x3f, 0xea, 0x62, 0x69,
        0xe4, 0x78, 0xbc, 0x63, 0x94, 0x76, 0xfb, 0xb6, 0x64, 0xa9, 0xf7, 0x81,
        0x70, 0xc6, 0xd, 0xa3, 0x70, 0x5, 0xc1, 0xc8, 0x94, 0x7f, 0x20, 0xff,
        0x83, 0x8c, 0xc4, 0x7a, 0x26, 0xd3, 0x84, 0xab, 0x51, 0x15, 0xfc, 0xb1,
        0x57, 0x2d, 0xb3, 0x9, 0x1b, 0xc8, 0x6d, 0x32, 0xfd, 0x52, 0x70, 0xa,
        0xf1, 0x47, 0xe2, 0xc4, 0xa8, 0x5c, 0x5e, 0x95, 0x18, 0xc8, 0x46, 0xa9,
        0xa3, 0xd0, 0xda, 0x76, 0xce, 0xbf, 0xdb, 0x31, 0x27, 0x4b, 0x68, 0x58,
        0xe5, 0x36, 0x13, 0x54, 0x29, 0x94, 0x4c, 0x30, 0x23, 0x4c, 0xc, 0x6a,
        0x3a, 0x5, 0x15, 0x70, 0x97, 0x8a, 0x3e, 0xc5, 0x82, 0x96, 0x65, 0x56,
        0x69, 0xc0, 0x4d, 0x58, 0x5b, 0x8a, 0x85, 0x39, 0x84, 0x29, 0x9b, 0xa5,
        0x9b, 0xe4, 0xc4, 0x79, 0x5b, 0x8b, 0xe1, 0x17, 0x25, 0x10, 0x22, 0x4,
        0x5, 0x44, 0xe5, 0x68, 0x72, 0x80, 0x88, 0xd5, 0x23, 0x22, 0x19, 0x8d,
        0xca, 0xa5, 0x26, 0xc4, 0x73, 0xdb, 0x6, 0x96, 0xb7, 0xe, 0x28, 0xc6,
        0xa, 0xc3, 0x65, 0x5c, 0x9c, 0x3, 0xf3, 0x1d, 0xc9, 0x53, 0x34, 0x6a,
        0x85, 0x1, 0xe2, 0x3c, 0x91, 0x6d, 0x70, 0xe1, 0x4d, 0xa2, 0xa, 0x67,
        0x50, 0xb0, 0xe2, 0x12, 0x1f, 0xba, 0x68, 0xdc, 0xd, 0x35, 0x3b, 0x32,
        0xa7, 0x2b, 0xe7, 0x91, 0x6d, 0xb2, 0xe0, 0xf4, 0xb8, 0xb1, 0x6d, 0xab,
        0xa6, 0x46, 0xd5, 0x4, 0x5a, 0x5d, 0xf1, 0x8f, 0x2d, 0x52, 0x6a, 0xb8,
        0x50, 0xf3, 0x22, 0x4e, 0xb1, 0x24, 0xa8, 0xa1, 0x15, 0x34, 0xbc, 0x3f,
        0xda, 0x8c, 0xc6, 0xc8, 0x53, 0x2b, 0xd0, 0x9f, 0xa8, 0x72, 0x3e, 0xc1,
        0x6a, 0x3a, 0x51, 0xb1, 0x99, 0x80, 0x1b, 0xae, 0x2d, 0x4c, 0x79, 0xa0,
        0x10, 0x2b, 0x7, 0x4a, 0xa, 0x65, 0x3a, 0x82, 0xe4, 0x1f, 0xbb, 0x9c,
        0x6e, 0x20, 0xa5, 0x1b, 0x17, 0xdc, 0xa7, 0x6f, 0x77, 0x22, 0xd, 0xb9,
        0xc2, 0xf6, 0xa7, 0xe1, 0x8d, 0x88, 0x88, 0xdc, 0x44, 0x68, 0xbd, 0x25,
        0x42, 0x5f, 0x20, 0x1b, 0x84, 0x15, 0x56, 0x5, 0x95, 0x9c, 0x40, 0xef,
        0xa1, 0x71, 0xaa, 0xc7, 0x82, 0x8, 0x39, 0xf4, 0x58, 0xae, 0x39, 0x50,
        0xac, 0xc7, 0x53, 0xff, 0x5, 0xb0, 0x29, 0x9d, 0x54, 0x4f, 0x8d, 0x1a,
        0x81, 0x61, 0xc2, 0x71, 0xc, 0x2f, 0xdb, 0x1b, 0x1b, 0xa7, 0x4f, 0x1a,
        0x4a, 0xa2, 0xa9, 0x8c, 0x2c, 0x1, 0xe7, 0xf9, 0xf, 0x85, 0xc1, 0x33,
        0xe7, 0x39, 0x8f, 0x43, 0x40, 0x30, 0x27, 0xeb, 0xad, 0x7e, 0xef, 0x22,
        0xf8, 0xb5, 0x51, 0xe5, 0xb3, 0x7c, 0x2a, 0x45, 0x88, 0x93, 0xac, 0xea,
        0x6a, 0x51, 0x63, 0x79, 0x45, 0x35, 0xfd, 0x9d, 0xd4, 0x55, 0x98, 0xd,
        0xf4, 0x29, 0x7c, 0xfc, 0x93, 0x52, 0xa4, 0x61, 0x6c, 0x1a, 0xcf, 0x5,
        0x5a, 0x3e, 0x44, 0x82, 0x6c, 0x44, 0x7e, 0x6e, 0xb2, 0xad, 0x5a, 0x3,
        0x72, 0x2f, 0xed, 0x77, 0x44, 0x16, 0xd1, 0x59, 0xa8, 0x10, 0x2d, 0x8,
        0x6c, 0xd6, 0xb2, 0x38, 0x95, 0x4c, 0x37, 0x54, 0x2e, 0x8d, 0xdc, 0xd6,
        0x34, 0xe5, 0xe2, 0x64, 0x9b, 0x57, 0x26, 0x38, 0x28, 0xd, 0x46, 0x7e,
        0xc3, 0x1, 0xcc, 0x36, 0x48, 0xe9, 0xd1, 0x9a, 0x9f, 0x29, 0xa1, 0xac,
        0x53, 0xdd, 0xf, 0x8a, 0x51, 0x5d, 0xe3, 0x18, 0x19, 0xcf, 0x93, 0x82,
        0x95, 0x5b, 0x69, 0x8e, 0xf, 0xab, 0x2, 0x17, 0xfa, 0xa7, 0x9, 0x35,
        0xf2, 0x9, 0x39, 0xe2, 0x5b, 0x36, 0x90, 0xa8, 0x46, 0x9c, 0xf3, 0x58,
        0x29, 0x0, 0xb1, 0xb0, 0xdd, 0xdc, 0x41, 0xf6, 0xa, 0x99, 0xe1, 0xff,
        0x2b, 0xe8, 0x1d, 0x3c, 0x86, 0x8e, 0xff, 0x9f, 0xed, 0x3e, 0x98, 0x5d,
        0x24, 0xfc, 0x58, 0xd7, 0x13, 0x12, 0xa7, 0x74, 0x5e, 0x3e, 0x44, 0x68,
        0x7d, 0x11, 0x0, 0x44, 0xb1, 0x28, 0x4f, 0x85, 0x1e, 0x92, 0x5a, 0x3c,
        0xc6, 0x77, 0x70, 0x4, 0x43, 0x1c, 0x81, 0x41, 0x65, 0xd2, 0x33, 0x77,
        0x91, 0xd1, 0xab, 0xe5, 0x97, 0x90, 0x1f, 0x7b, 0xe6, 0xbb, 0xcc, 0xb3,
        0x65, 0x61, 0x57, 0x6d, 0x60, 0xa6, 0x93, 0x79, 0x3d, 0x70, 0x43, 0x92,
        0x5, 0x4b, 0x2, 0x67, 0xea, 0x78, 0x8b, 0x12, 0xba, 0x85, 0x9c, 0x2b,
        0xda, 0x7b, 0xb, 0xed, 0x3c, 0xe8, 0xca, 0xa4, 0x64, 0xe4, 0x9b, 0x9c,
        0xa8, 0x5c, 0x5c, 0xe2, 0xa7, 0x82, 0xea, 0x4c, 0x79, 0x77, 0x4, 0xf1,
        0x0, 0x5, 0xad, 0x2f, 0x72, 0x3d, 0x95, 0xe5, 0x8, 0x50, 0x48, 0x2e,
        0x80, 0x5d, 0x54, 0x67, 0xf9, 0x41, 0xf1, 0x1d, 0xb6, 0x86, 0x6, 0x73,
        0xa, 0xaf, 0x99, 0x7d, 0x2c, 0x30, 0xa6, 0xc9, 0xbc, 0x7d, 0x39, 0x16,
        0x3, 0x55, 0x85, 0x63, 0xe8, 0x69, 0x36, 0x2a, 0xc2, 0xba, 0x5b, 0xf,
        0x49, 0x1d, 0x2, 0xb4, 0xe1, 0x12, 0xf1, 0xe6, 0x9b, 0xaf, 0xd4, 0x78,
        0xd9, 0xaf, 0x7b, 0x5f, 0x50, 0xa5, 0x86, 0x32, 0xbc, 0x36, 0xe4, 0x96,
        0x11, 0xef, 0xf8, 0xb4, 0xd4, 0x91, 0xf7, 0xd7, 0x43, 0x15, 0x28, 0x3,
        0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x5d, 0x35, 0x74,
        0xc4, 0xd9, 0x9c, 0x8, 0xef, 0x95, 0x6, 0x19, 0xbe, 0x72, 0xbf, 0xa1,
        0xd5, 0xa, 0xe3, 0xc1, 0x53, 0xd1, 0xf3, 0xf, 0x64, 0xbc, 0x1a, 0xc0,
        0x8d, 0xe9, 0x9e, 0xa5, 0x56, 0x3, 0x0, 0x2, 0x4, 0x0, 0x2, 0x3a, 0xa,
        0x34, 0xc8, 0xd, 0xdb, 0x3e, 0xac, 0x5c, 0xd5, 0x92, 0x38, 0x30, 0x81,
        0x4d, 0x72, 0xf9, 0xde, 0x9, 0x6b, 0xca, 0x74, 0x87, 0x79, 0xda, 0x39,
        0x7a, 0xa3, 0xb7, 0x71, 0xfe, 0x7e, 0x40, 0xc6, 0x41, 0x1a, 0xea, 0x8,
        0x2e, 0x2c, 0x5d, 0x74, 0x34, 0x73, 0x68, 0x67, 0x7d, 0xb6, 0x95, 0x45,
        0x12, 0x62, 0x37, 0xd5, 0xed, 0x78, 0xfa, 0xa0, 0x84, 0x63, 0x52, 0xf5,
        0x38, 0x3f, 0x95, 0x3, 0x0, 0xfd, 0xb7, 0x19, 0xd1, 0x24, 0xce, 0xff,
        0x58, 0x6, 0xe, 0xf5, 0x8d, 0x94, 0xa, 0x75, 0xe4, 0x3d, 0x13, 0x9d,
        0x55, 0xa5, 0xe4, 0xd3, 0x26, 0x4d, 0xc9, 0xeb, 0x4f, 0x77, 0x3b, 0xff,
        0xc5, 0x72, 0x90, 0x19, 0xe4, 0x7e, 0xd2, 0x7e, 0xf5, 0x1, 0x0, 0x0,
        0x0, 0x64, 0x20, 0xcc, 0x42, 0x1e, 0x11, 0x89, 0x80, 0x5c, 0x8c, 0xec,
        0x8, 0x9d, 0x74, 0xc1, 0x98, 0xf, 0x79, 0xc0, 0x69, 0x0, 0x5a, 0x21,
        0xae, 0x40, 0xa7, 0xe5, 0x8e, 0x68, 0x77, 0xa8, 0x10, 0x7b, 0x4, 0x9,
        0x1a, 0x9a, 0x97, 0x1, 0x2, 0x90, 0xe5, 0x10, 0xa2, 0x10, 0x60, 0xad,
        0xa3, 0x39, 0x71, 0xd, 0xd, 0xdc, 0x43, 0xe4, 0x46, 0x0, 0x6c, 0x5b,
        0xc9, 0x38, 0x64, 0xda, 0xfb, 0x3, 0xcf, 0x4b, 0xa4, 0x72, 0xbe, 0xdf,
        0x5c, 0xa7, 0x1, 0x0, 0x47, 0xe7, 0xd3, 0x5d, 0x93, 0xe4, 0xb5, 0x62,
        0x8e, 0xaf, 0xd3, 0x36, 0xd, 0x65, 0x25, 0x89, 0x52, 0xf4, 0xd9, 0x57,
        0x5e, 0xac, 0x1b, 0x1f, 0x18, 0xee, 0x18, 0x51, 0x29, 0x71, 0x82, 0x93,
        0xb6, 0xd7, 0x62, 0x2b, 0x1e, 0xdd, 0x1f, 0x20, 0x1, 0x0, 0x0, 0x0,
        0x40, 0xe7, 0xa, 0x36, 0xe2, 0xce, 0x51, 0xd3, 0x1d, 0x4c, 0xf5, 0xd6,
        0x73, 0x1f, 0xa6, 0x37, 0x38, 0x64, 0x81, 0x27, 0xdb, 0x83, 0x37, 0x15,
        0xd3, 0x96, 0x52, 0xd8, 0x6d, 0x92, 0x7d, 0x48, 0x88, 0x3, 0x0, 0x1,
        0x0, 0x2, 0x0, 0x3, 0x0, 0x5, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5,
    ];

    // Making sure that <https://github.com/LNP-BP/LNPBPs/issues/58>
    // is fulfilled and we do not occasionally commit to all chain
    // parameters (which may vary and change with time) in RGB contract id
    #[test]
    fn test_genesis_commit_ne_strict() {
        let genesis = Genesis {
            schema_id: Default::default(),
            chain: Chain::Mainnet,
            metadata: Default::default(),
            owned_rights: Default::default(),
            public_rights: Default::default(),
            script: Default::default(),
        };
        assert_ne!(
            strict_encode(&genesis).unwrap(),
            genesis.clone().consensus_commit().to_vec()
        );

        let mut encoder = vec![];
        genesis.schema_id.strict_encode(&mut encoder).unwrap();
        encoder.write_all(GENESIS_HASH_MAINNET).unwrap();
        genesis.metadata.strict_encode(&mut encoder).unwrap();
        genesis.owned_rights.strict_encode(&mut encoder).unwrap();
        genesis.public_rights.strict_encode(&mut encoder).unwrap();
        genesis.script.strict_encode(&mut encoder).unwrap();
        assert_eq!(genesis.consensus_commit(), NodeId::commit(&encoder));

        let transition = Transition {
            transition_type: Default::default(),
            metadata: Default::default(),
            parent_owned_rights: Default::default(),
            owned_rights: Default::default(),
            public_rights: Default::default(),
            script: Default::default(),
        };

        let mut encoder = vec![];
        transition
            .transition_type
            .strict_encode(&mut encoder)
            .unwrap();
        transition.metadata.strict_encode(&mut encoder).unwrap();
        transition
            .parent_owned_rights
            .strict_encode(&mut encoder)
            .unwrap();
        transition.owned_rights.strict_encode(&mut encoder).unwrap();
        transition
            .public_rights
            .strict_encode(&mut encoder)
            .unwrap();
        transition.script.strict_encode(&mut encoder).unwrap();

        let mut encoder1 = vec![];
        let mut encoder2 = vec![];

        transition.clone().commit_encode(&mut encoder1);
        transition.clone().strict_encode(&mut encoder2).unwrap();

        assert_eq!(encoder1, encoder2);
        assert_eq!(encoder, encoder1);
    }

    #[test]
    fn test_encoding_nodes() {
        test_encode!((GENESIS, Genesis));
        test_encode!((TRANSITION, Transition));
    }

    #[test]
    fn test_node_attributes() {
        let genesis = Genesis::strict_decode(&GENESIS[..]).unwrap();
        let transition = Transition::strict_decode(&TRANSITION[..]).unwrap();

        // Typeid/Nodeid test
        assert_eq!(
            genesis.node_id().to_hex(),
            "d020842adeae26b92b6cd9bd03131e802510dc11490919304105ed1083ac0f15"
        );
        assert_eq!(
            transition.node_id().to_hex(),
            "94628edd6cb9f20206c0d05bfc6847d881f21d87c5d3d3f7f26af9c3fcab4fd4"
        );

        assert_eq!(genesis.transition_type(), None);
        assert_eq!(transition.transition_type(), Some(10));

        // Ancestor test

        assert_eq!(genesis.parent_owned_rights(), &ParentOwnedRights::new());

        let ancestor_trn = transition.parent_owned_rights();
        let assignments = ancestor_trn
            .get(
                &NodeId::from_hex(
                    "060ef58d940a75e43d139d55a5e4d3264dc9eb4f773bffc5729019e47ed27ef5",
                )
                .unwrap(),
            )
            .unwrap();
        assert_eq!(
            assignments.get(&1usize).unwrap(),
            &[1u16, 2u16, 3u16, 4u16, 5u16].to_vec()
        );
        assert_eq!(
            assignments.get(&2usize).unwrap(),
            &[10u16, 20u16, 30u16, 40u16, 50u16].to_vec()
        );
        assert_eq!(
            assignments.get(&3usize).unwrap(),
            &[100u16, 200u16, 300u16, 400u16, 500u16].to_vec()
        );

        // Metadata test

        let gen_meta = genesis.metadata();

        let tran_meta = transition.metadata();

        assert_eq!(gen_meta, tran_meta);

        let u8_from_gen = gen_meta.u8(13 as schema::FieldType);

        assert_eq!(u8_from_gen.as_vec(), &[2u8, 3u8].to_vec());

        let string_from_tran = tran_meta.string(13 as schema::FieldType);

        assert_eq!(
            string_from_tran.as_vec()[0],
            "One Random String".to_string()
        );

        // Assignments test

        let gen_assignments = genesis.owned_rights();
        let tran_assingmnets = transition.owned_rights();

        assert_eq!(gen_assignments, tran_assingmnets);

        assert!(gen_assignments.get(&1usize).unwrap().is_declarative());
        assert!(gen_assignments.get(&2usize).unwrap().is_field());
        assert!(tran_assingmnets.get(&3usize).unwrap().is_data());

        let seal1 = gen_assignments
            .get(&2usize)
            .unwrap()
            .seal(1)
            .unwrap()
            .unwrap();

        let txid = match seal1 {
            super::seal::Revealed::TxOutpoint(op) => Some(op.txid),
            _ => None,
        }
        .unwrap();

        assert_eq!(
            txid.to_hex(),
            "201fdd1e2b62d7b6938271295118ee181f1bac5e57d9f4528925650d36d3af8e"
                .to_string()
        );

        let seal2 = tran_assingmnets
            .get(&3usize)
            .unwrap()
            .seal(1)
            .unwrap()
            .unwrap();

        let txid = match seal2 {
            super::seal::Revealed::TxOutpoint(op) => Some(op.txid),
            _ => None,
        }
        .unwrap();

        assert_eq!(
            txid.to_hex(),
            "f57ed27ee4199072c5ff3b774febc94d26d3e4a5559d133de4750a948df50e06"
                .to_string()
        );

        // Script
        let gen_script = genesis.script();
        let tran_script = transition.script();

        assert_eq!(gen_script, tran_script);

        assert_eq!(gen_script, &[1, 2, 3, 4, 5]);

        // Field Types
        let gen_fields = genesis.field_types();
        let tran_fields = transition.field_types();

        assert_eq!(gen_fields, tran_fields);

        assert_eq!(gen_fields, vec![13usize]);

        // Assignment types
        let gen_ass_types = genesis.owned_right_types();
        let tran_ass_types = transition.owned_right_types();

        assert_eq!(gen_ass_types, tran_ass_types);

        assert_eq!(gen_ass_types, bset![1usize, 2, 3]);

        // assignment by types
        let assignment_gen = genesis.owned_rights_by_type(3).unwrap();
        let assignment_tran = transition.owned_rights_by_type(1).unwrap();

        assert!(assignment_gen.is_data());
        assert!(assignment_tran.is_declarative());

        // All seal confidentials
        let gen_seals = genesis.all_seal_definitions();
        let tran_seals = transition.all_seal_definitions();

        assert_eq!(gen_seals, tran_seals);

        assert_eq!(
            gen_seals[0].to_hex(),
            "6b3c1bee0bd431f53e6c099890fdaf51b8556a6dcd61c6150ca055d0e1d4a524"
                .to_string()
        );
        assert_eq!(
            tran_seals[3].to_hex(),
            "58f3ea4817a12aa6f1007d5b3d24dd2940ce40f8498029e05f1dc6465b3d65b4"
                .to_string()
        );

        // Known seals
        let known_gen_seals = genesis.known_seal_definitions();
        let known_seals_tran = transition.known_seal_definitions();

        assert_eq!(known_gen_seals, known_seals_tran);

        let txid1 = match known_gen_seals[2] {
            super::seal::Revealed::TxOutpoint(op) => Some(op.txid),
            _ => None,
        }
        .unwrap();

        let txid2 = match known_gen_seals[3] {
            super::seal::Revealed::TxOutpoint(op) => Some(op.txid),
            _ => None,
        }
        .unwrap();

        assert_eq!(
            txid1.to_hex(),
            "f57ed27ee4199072c5ff3b774febc94d26d3e4a5559d133de4750a948df50e06"
                .to_string()
        );
        assert_eq!(
            txid2.to_hex(),
            "201fdd1e2b62d7b6938271295118ee181f1bac5e57d9f4528925650d36d3af8e"
                .to_string()
        );

        // Known seals by type
        let dec_gen_seals = genesis.known_seal_definitions_by_type(1);
        let hash_tran_seals = transition.known_seal_definitions_by_type(3);

        let txid1 = match dec_gen_seals[0] {
            super::seal::Revealed::TxOutpoint(op) => Some(op.txid),
            _ => None,
        }
        .unwrap();

        assert_eq!(
            txid1.to_hex(),
            "f57ed27ee4199072c5ff3b774febc94d26d3e4a5559d133de4750a948df50e06"
                .to_string()
        );

        let txid2 = match hash_tran_seals[1] {
            super::seal::Revealed::TxOutpoint(op) => Some(op.txid),
            _ => None,
        }
        .unwrap();

        assert_eq!(
            txid2.to_hex(),
            "201fdd1e2b62d7b6938271295118ee181f1bac5e57d9f4528925650d36d3af8e"
                .to_string()
        );
    }

    #[test]
    fn test_autoconceal_node() {
        let mut genesis = Genesis::strict_decode(&GENESIS[..]).unwrap();
        let mut transition =
            Transition::strict_decode(&TRANSITION[..]).unwrap();

        assert_eq!(
            genesis.clone().consensus_commit(),
            NodeId::from_hex("d020842adeae26b92b6cd9bd03131e802510dc11490919304105ed1083ac0f15")
                .unwrap()
        );
        assert_eq!(
            transition.clone().consensus_commit(),
            NodeId::from_hex("94628edd6cb9f20206c0d05bfc6847d881f21d87c5d3d3f7f26af9c3fcab4fd4")
                .unwrap()
        );

        genesis.conceal_all();
        transition.conceal_all();

        assert_eq!(
            genesis.clone().consensus_commit(),
            NodeId::from_hex("978e5928309838e4ef1aa6206f4fa4a297ae454108baf74940949af8ace89aec")
                .unwrap()
        );
        assert_eq!(
            transition.clone().consensus_commit(),
            NodeId::from_hex("4e53133b0581f0b69c0c3da9a84ec0e8acacd050862797682e42f36de5584215")
                .unwrap()
        );
    }

    #[test]
    fn test_genesis_impl() {
        let genesis: Genesis = Genesis::strict_decode(&GENESIS[..]).unwrap();

        let contractid = genesis.contract_id();
        let schemaid = genesis.schema_id();
        let chain = genesis.chain();

        assert_eq!(
            contractid,
            ContractId::from_hex(
                "d020842adeae26b92b6cd9bd03131e802510dc11490919304105ed1083ac0f15"
            )
            .unwrap()
        );
        assert_eq!(
            schemaid,
            SchemaId::from_hex("8eafd3360d65258952f4d9575eac1b1f18ee185129718293b6d7622b1edd1f20")
                .unwrap()
        );
        assert_eq!(chain, &bp::chain::Chain::Mainnet);
    }
}
